# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the PyODPS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyODPS 0.7.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-20 10:25+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/faq.rst:5
msgid "常见问题"
msgstr ""

#: ../../source/faq.rst:8
msgid "如何查看当前使用的 PyODPS 版本"
msgstr ""

#: ../../source/faq.rst:9
msgid ""
"import odps\n"
"print(odps.__version__)"
msgstr ""

#: ../../source/faq.rst:18
msgid "读取数据时报\"project is protected\""
msgstr ""

#: ../../source/faq.rst:19
msgid "Project 上的安全策略禁止读取表中的数据，此时，如果想使用全部数据，有以下选项可用："
msgstr ""

#: ../../source/faq.rst:21
msgid "联系 Project Owner 增加例外规则"
msgstr ""

#: ../../source/faq.rst:22
msgid "使用 DataWorks 或其他脱敏工具先对数据进行脱敏，导出到非保护 Project，再进行读取"
msgstr ""

#: ../../source/faq.rst:24
msgid "如果只想查看部分数据，有以下选项"
msgstr ""

#: ../../source/faq.rst:26
msgid "改用 ``o.execute_sql('select * from <table_name>').open_reader()``"
msgstr ""

#: ../../source/faq.rst:27
msgid "改用 :ref:`DataFrame <df>`，``o.get_table('<table_name>').to_df()``"
msgstr ""

#: ../../source/faq.rst:30
msgid "出现 ImportError，并且在 ipython 或者 jupyter 下使用"
msgstr ""

#: ../../source/faq.rst:31
msgid ""
"如果 ``from odps import errors`` 也不行，则是缺少 ipython 组件，执行 ``pip install -U "
"jupyter`` 解决。"
msgstr ""

#: ../../source/faq.rst:34
msgid "执行 SQL 通过 open_reader 只能取到最多1万条记录，如何取多余1万条？"
msgstr ""

#: ../../source/faq.rst:35
msgid ""
"使用 ``create table as select ...`` 把SQL的结果保存成表，再使用 :ref:`table.open_reader"
" <table_open_reader>` 来读取。"
msgstr ""

#: ../../source/faq.rst:38
msgid "上传 pandas DataFrame 到 ODPS 时报错：ODPSError: ODPS entrance should be provided"
msgstr ""

#: ../../source/faq.rst:39
msgid "原因是没有找到全局的ODPS入口，有三个方法："
msgstr ""

#: ../../source/faq.rst:41
#, python-format
msgid "使用 :ref:`room 机制 <cl>` ，``%enter`` 的时候，会配置全局入口"
msgstr ""

#: ../../source/faq.rst:42
msgid "对odps入口调用 ``to_global`` 方法"
msgstr ""

#: ../../source/faq.rst:43
msgid "使用odps参数，``DataFrame(pd_df).persist('your_table', odps=odps)``"
msgstr ""

#: ../../source/faq.rst:46
msgid "在 DataFrame 中如何使用 max_pt ？"
msgstr ""

#: ../../source/faq.rst:47
msgid "使用 ``odps.df.func`` 模块来调用 ODPS 内建函数"
msgstr ""

#: ../../source/faq.rst:49
msgid ""
"from odps.df import func\n"
"df = o.get_table('your_table').to_df()\n"
"df[df.ds == func.max_pt('your_project.your_table')]  # ds 是分区字段"
msgstr ""

#: ../../source/faq.rst:56
msgid "通过 DataFrame 写表时报 table lifecycle is not specified in mandatory mode"
msgstr ""

#: ../../source/faq.rst:57
msgid "Project 要求对每张表设置 lifecycle，因而需要在每次执行时设置"
msgstr ""

#: ../../source/faq.rst:59
msgid ""
"from odps import options\n"
"options.lifecycle = 7  # 或者你期望的 lifecycle 整数值，单位为天"
msgstr ""

#: ../../source/faq.rst:65
msgid ""
"执行 SQL 时报 Please add put { \"odps.sql.submit.mode\" : \"script\"} for "
"multi-statement query in settings"
msgstr ""

#: ../../source/faq.rst:66
msgid "请参考 :ref:`SQL设置运行参数 <sql_hints>` 。"
msgstr ""

#: ../../source/faq.rst:69
msgid "如何遍历 PyODPS DataFrame 中的每行数据"
msgstr ""

#: ../../source/faq.rst:70
msgid ""
"PyODPS DataFrame 不支持遍历每行数据。这样设计的原因是由于 PyODPS DataFrame 面向大规模数据设计，在这种场景下， "
"数据遍历是非常低效的做法。我们建议使用 DataFrame 提供的 ``apply`` 或 ``map_reduce`` "
"接口将原本串行的遍历操作并行化， 具体可参见 `这篇文章 <https://yq.aliyun.com/articles/138752>`_ "
"。如果确认你的场景必须要使用数据遍历， 而且遍历的代价可以接受，可以使用 ``to_pandas`` 方法将 DataFrame 转换为 "
"Pandas DataFrame，或者将 DataFrame 存储为表后使用 ``read_table`` 或者 Tunnel 读取数据。"
msgstr ""

